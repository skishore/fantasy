# TODO(skishore): Deal with count semantics correctly. Right now we are not
# drawing a semantic distinction between singulars and plurals, but as a
# result text-generation can be strange. However, if we have to create a new
# "$NounType -> %noun_singular | %noun_plural" rule for each type, it will
# interact badly with the already redundant problem above.
#
# TODO(skishore): Deal with relations. On their own, "larka" has the semantics
# of a "boy", but "mera larka" means "my son", not "my boy". We can add
# relation words to the noun table, but we need to make sure they don't get
# expanded by %noun, only by %relation.
#
# TODO(skishore): Support parsing text with punctuation. That will also be
# useful for lists, as well as helping with, e.g. the ? at the end of AskName.
# We can use the existing fault-tolerance, along with support for explicit
# punctuation text terms.
#
# TODO(skishore): Create a way to pass hints to the lexer, like the gender of
# "I" and of "you", the tone, and the current pronoun categories in scope.
# This step is probably relatively easy, as long as we can define the API.
#
# TODO(skishore): Support '$Food chahie', where the subject "I" is implicit.
# We can avoid creating more rules if we add support for explicit null rules
# (e.g. we can make $Noun in $TellWant an explicit $MaybeNoun), where the null
# rules can still have metadata like scoring, semantics, and syntax. The only
# thing blocking this change is fixing the optional template handler syntax.
# (Or does it block? If the null rule has nontrivial semantics, then no.)

# Top-level intents.

$AskFood! (= 'Ask(R[want].$0)')
= $Person:0?^ kya $Khana? chahte^ hain^
= $Person:0?^ kya $Leenge^
= $PersonKo:0?^ kya $Khana chahie^
= $PersonKo:0? $Main?^ kya $La sakta hun^ (> -1)
= $Main?^ $PersonKo? kya $La sakta hun^ (> -1)

$AskName! (= 'Ask(R[name].$0)')
= $Person^ kaun hai^
= $PersonKa^ nam* kya hai^

$Hello! (= 'Hello()')
= hello
= namaste

$Mention! (= 'Mention($0)')
= $Noun (< -10)

$TellName! (= 'Tell($0, name.$1)')
= $Person:0^ %token:1 hai^ (< -10)
= $PersonKa:0^ nam* %token:1 hai^ (< -10)

$TellWant! (= 'Tell($0, want.$1)')
= $Person^ $Noun $WantActive^
= $Person^ $Drink piega^
= $Person^ $Food khaega^
= $PersonKo $Noun^ $WantPassive^
= $PersonKo $Drink^ pina hai^
= $PersonKo $Food^ khana hai^

# Noun-phrase helpers.

$Adjectives (= '$0 & $1')
= $Adjectives? %adjective

$Determiner
= $NounKa (= 'owner.$0')
= %determiner (= 'context.$0')

LIST[@item]
= @item (= '$0')
= @item aur^ @item (= '$0 | $2') (? count plural) (? person third)

NOUN[@term] (= '$0 & count.$1 & $2 & $3')
= $Determiner?^ %number?* $Adjectives?^ @term*

# Specific subtypes of noun phrase.

$Drink (= '$0')
= LIST[NOUN[%drink]]

$Food (= '$0')
= LIST[NOUN[%food]]

$Noun (= '$0')
= LIST[NOUN[%noun]]
= %direct

$NounKa (= '$0')
= NOUN[%noun] ka^
= %genitive
< %direct ka^ (< -0.5)

$Person (= '$0')
= LIST[NOUN[%person]]
= %direct

$PersonKa (= '$0')
= LIST[NOUN[%person]] ka^
= %genitive
< %direct ka^ (< -0.5)

$PersonKo (= '$0')
= LIST[NOUN[%person]] ko^
= %dative
< %direct ko^ (< -0.5)

# Simple substitutions.

$Khana
= khana
= khane ke liye

$Leenge
= khaenge
= leenge
= pienge

$La
= de
= la
= madad kar

$Main
= $MainSingular
= $MainPlural

$MainSingular
= main
< mujhe

$MainPlural
= ham
< hame

$WantActive
= leega
< khaega (< -0.5)
< piega (< -0.5)

$WantPassive
= chahie
= de do
= dijie
= do
< khana hai^ (< -0.5)
< pina hai^ (< -0.5)

# The base vocabulary, including several classes of words.

lexer: ```

const {flatten} = require('../lib/base');
const {HindiLexer} = require('../hindi/lexer');
const {Vocabulary} = require('../hindi/vocabulary');
const {Lambda} = require('../template/lambda');

const {adjectives, nouns, numbers, particles, pronouns, verbs} = Vocabulary;

const vocabulary = flatten([
  adjectives(`
            meaning | word
    ----------------|-------------
        quality.bad | kharab/KarAb
       quality.good | accha/acCA
       quality.okay | thik/TIk
         size.large | bara/baDZA
         size.small | chota/cotA
  `),
  nouns(`
    # The "role" column encodes gender and declension. Nouns with a "." do not
    # decline while nouns with an "s" decline in the plural and oblique cases.

      category | meaning                    | word          | role
      ---------|----------------------------|---------------|-----
      abstract | type.help                  | madad/maxax   | f.
             ^ | type.name                  | nam/nAm       | m.
         drink | type.tea                   | chai/cAy      | f.
             ^ | type.water                 | pani/pAnI     | m.
          food | type.apple                 | seb/seb       | m.
             ^ | type.bread                 | roti/rotI     | m.
             ^ | type.food                  | khana/KAnA    | m.
        person | type.child                 | baccha/baccA  | ms
             ^ | type.adult                 | log/log       | m.
             ^ | gender.male & type.child   | larka/ladZakA | ms
             ^ | gender.female & type.child | larki/ladZakI | fs
             ^ | gender.male & type.adult   | admi/AxmI     | m.
             ^ | gender.female & type.adult | aurat/Oraw    | fs
    profession | profession.doctor          | daktar/dAktar | m.
             ^ | profession.lawyer          | vakil/vakIl   | m.
  `),
  numbers(`
    meaning | word
    --------|-------------
          1 | ek/ek
          2 | do/xo
          3 | tin/wIn
          4 | char/cAr
          5 | panch/pAzc
          6 | chah/Cah
          7 | sat/sAw
          8 | ath/AT
          9 | nau/nO
  `),
  particles(`
    # TODO(skishore): The "temporary" category here contains words that should
    # appear in some part-of-speech list, but for which we don't yet have the
    # proper declension. For example, we haven't implemented the reflective
    # tense "chahie" for "chahna" or the command tense "dijie" for "dena".

      category | meaning | word            | declines
    -----------|---------|-----------------|---------
    determiner |    that | voh/vah         | n
             ^ |    this | yeh/yah         | n
      particle |       - | aur/Or          | n
             ^ |       - | hello/helo      | n
             ^ |       - | ka/kA           | y
             ^ |       - | ke/ke           | n
             ^ |       - | ko/ko           | n
             ^ |       - | liye/liye       | n
             ^ |       - | namaste/namaswe | n
             ^ |       - | sakta/sakwA     | n
      question |     how | kaisa/kEsA      | y
             ^ |    what | kya/kyA         | n
             ^ |    when | kab/kab         | n
             ^ |   where | kaha/kahA       | n
             ^ |     who | kaun/kOn        | n
             ^ |     why | kyun/kyUM       | n
     temporary |       - | chahie/cAhIe    | n
             ^ |       - | dijie/dijIe     | n
  `),
  pronouns(`
    # The "role" column encodes person, number, and, for the 2nd person, tone.
    # The tone is either i (intimate), c (casual), or f (formal).

    role | direct   | genitive        | dative (1)   | dative (2)  | copula
    -----|----------|-----------------|--------------|-------------|---------
     1s. | main/mEM | mera/merA       | mujhko/muJko | mujhe/muJe  | hun/hUz
     2si | tu/wU    | tera/werA       | tujhko/wuJko | tujhe/wuJe  | hai/hE
     3s. | voh/vah  | uska/uskA       | usko/usko    | use/use     | ^
     1p. | ham/ham  | hamara/hamArA   | hamko/hamko  | hame/hame   | hain/hEM
     2pc | tum/wum  | tumhara/wumhArA | tumko/wumko  | tumhe/wumhe | ho/ho
     2pf | ap/Ap    | apka/ApkA       | apko/Apko    | <           | ^
     3p. | voh/vah  | uska/uskA       | unko/unko    | usne/usne   | hai/hE
  `),
  verbs(`
    meaning | word
    --------|-------------
      bring | lana/lAnA
         do | karna/karnA
      drink | pina/pInA
        eat | khana/KAnA
       give | dena/xenA
      sleep | sona/sonA
       take | lena/lenA
       want | chahna/cAhnA
  `),
]);

return new HindiLexer(Lambda, vocabulary);

```
